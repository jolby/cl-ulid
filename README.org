#+title: ULID implementation in Common Lisp

* A *ULID* is a *universally unique lexicographically sortable identifier*.

It is:

- 128-bit compatible with *UUID*
- 1.21e+24 unique ULIDs per millisecond
- Lexicographically sortable!
- Canonically encoded as a 26 character string, as opposed to the 36 character UUID
- Uses Crockford's base32 for better efficiency and readability (5 bits per character)
- Case insensitive
- No special characters (URL safe)

In general the structure of a ULID is as follows:

| 01AN4Z07BY | 79KA1307SR9X4MV3 |
|------------+------------------|
| Timestamp  | Randomness       |
| 48bits     | 80bits           |
|------------+------------------|

For more information have a look at the original
[[https://github.com/alizain/ulid#specification][specification]].

* Installation
cl-ulid is not in quicklisp. It will need to be installed in the local-projects quicklisp directory:

#+begin_src bash
  > cd /USER_HOME/quicklisp/local-projects/
  > git clone https://github.com/jolby/cl-ulid.git
#+end_src

* Basic Usage at the REPL
#+begin_src lisp
CL-USER>(ql:quickload :cl-ulid)
> (:ULID)
CL-USER> (ulid::make-ulid-string)
>"7RY42AX2813BWF1FA2RNVHC1JF"
CL-USER> ;;;; make-ulid returns a struct with bytes and code fields
CL-USER> (ulid:make-ulid)
#S(ULID:ULID
   :BYTES #(104 203 56 174 137 1 18 207 23 180 41 2 105 149 3 189)
   :CODE "38SCWAX2812B7HFD1909MSA0XX")
CL-USER> ;; Retrieve the timestamp from either the string or struct
CL-USER> (let* ((ts (ulid::get-unix-time-ms))
                (ulid-str (ulid:make-ulid-string ts))
                (ulid (ulid:make-ulid ts)))
           (list ts (ulid:ulid-timestamp ulid-str) (ulid:ulid-timestamp ulid)))
> (1690846643000 1690846643000 1690846643000)
#+end_src

* Strong Random
The default cl-ulid system only uses the random function provided by the lisp implementation. This probably shouldn't be used for any sort of production system. At the cost of pulling in the ironclad system as a dependency, you can have a strong random generator.

#+begin_src lisp
CL-USER>(ql:quickload :cl-ulid/strong-random)
> (:ULID/STRONG-RANDOM)
CL-USER> ulid:*random-byte-fn*
> #<FUNCTION IRONCLAD:RANDOM-DATA>
CL-USER> (ulid::make-ulid-string)
> "7RY42AX2813BWF1FA2RNVHC1JF"
#+end_src
